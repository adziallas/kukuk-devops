pipeline {
  agent any

  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '20'))
    ansiColor('xterm')
  }

  environment {
    IMAGE_TAG = "${env.BUILD_NUMBER}"
    DOCKER_BUILDKIT = '1'
    PROFILE = 'dev'
    DOCKERHUB_NAMESPACE = 'YOUR_DOCKERHUB_USERNAME'   // <— ANPASSEN!
    BACKEND_IMAGE = "docker.io/${DOCKERHUB_NAMESPACE}/kukuk-backend"
    FRONTEND_IMAGE = "docker.io/${DOCKERHUB_NAMESPACE}/kukuk-frontend"
  }

  stages {
    stage('Checkout') { steps { checkout scm } }

    stage('Build Backend (Maven)') {
      steps { sh 'mvn -B -f backend/pom.xml -P${PROFILE} -DskipTests=false clean package' }
    }

    stage('Test Reports (JUnit)') {
      steps { junit 'backend/target/surefire-reports/*.xml' }
    }

    stage('Build Frontend (npm + Jest)') {
      steps {
        dir('frontend') {
          sh 'npm ci'
          sh 'npm test || true'
          junit 'reports/jest-junit.xml'
          sh 'npm run build'
        }
      }
    }

    stage('Docker Build & Tag') {
      steps {
        sh '''
          docker build -f docker/backend.Dockerfile  -t ${BACKEND_IMAGE}:${IMAGE_TAG}  -t ${BACKEND_IMAGE}:latest .
          docker build -f docker/frontend.Dockerfile -t ${FRONTEND_IMAGE}:${IMAGE_TAG} -t ${FRONTEND_IMAGE}:latest .
        '''
      }
    }

    stage('Docker Login & Push') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DH_USER', passwordVariable: 'DH_PASS')]) {
          sh '''
            echo "$DH_PASS" | docker login -u "$DH_USER" --password-stdin
            docker push ${BACKEND_IMAGE}:${IMAGE_TAG}
            docker push ${BACKEND_IMAGE}:latest
            docker push ${FRONTEND_IMAGE}:${IMAGE_TAG}
            docker push ${FRONTEND_IMAGE}:latest
          '''
        }
      }
    }

    stage('Deploy Dev (latest)') {
      steps {
        withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
          sh '''
            export KUBECONFIG="$KUBECONFIG_FILE"
            kustomize build k8s/overlays/dev | kubectl apply -f -
            # Dev setzt explizit Images auf Docker Hub (latest)
            kubectl -n dev set image deployment/backend  backend=${BACKEND_IMAGE}:latest
            kubectl -n dev set image deployment/frontend frontend=${FRONTEND_IMAGE}:latest
            kubectl -n dev rollout status deployment backend --timeout=120s
            kubectl -n dev rollout status deployment frontend --timeout=120s
          '''
        }
      }
    }

    stage('Freigabe Prod') {
      steps { timeout(time: 1, unit: 'HOURS') { input message: "Prod-Deployment für Build #${env.BUILD_NUMBER} freigeben?" } }
    }

    stage('Deploy Prod (getaggt)') {
      environment { PROFILE = 'prod' }
      steps {
        withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
          sh '''
            export KUBECONFIG="$KUBECONFIG_FILE"
            kustomize build k8s/overlays/prod | kubectl apply -f -
            kubectl -n prod set image deployment/backend  backend=${BACKEND_IMAGE}:${IMAGE_TAG}
            kubectl -n prod set image deployment/frontend frontend=${FRONTEND_IMAGE}:${IMAGE_TAG}
            kubectl -n prod rollout status deployment backend --timeout=180s
            kubectl -n prod rollout status deployment frontend --timeout=180s
          '''
        }
      }
    }
  }

  post {
    always { archiveArtifacts artifacts: 'k8s/**/*.yaml', fingerprint: true }
    success { echo "Pipeline OK (TAG ${IMAGE_TAG})" }
  }
}